// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Aluno {
  id               Int         @id @default(autoincrement())
  nomeCompleto     String
  numeroDeprocesso String      @unique
  classe           String
  curso            String
  email            String?
  BI               String      @unique
  turma            String
  dataNascimento   DateTime
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt()
  Pagamento        Pagamento[]
}

model Secretario {
  id           Int         @id @default(autoincrement())
  nomeCompleto String
  email        String      @unique
  password     String
  mainAdmin    Boolean
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt()
  Pagamento    Pagamento[]
}

enum formaDePagamentoEnum {
  multicaixa
  deposito
}

model Pagamento {
  id                 Int                  @id @default(autoincrement())
  numeroDeFactura    String               
  formaDePagamento   formaDePagamentoEnum
  mes                String
  valor              Int
  aluno              Aluno                @relation(fields: [alunoId], references: [id])
  alunoId            Int
  secretario         Secretario           @relation(fields: [secretarioId], references: [id])
  secretarioId       Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt()
  DescontoEfectuados DescontoEfectuados[]
}

model Desconto {
  id                 Int                  @id @default(autoincrement())
  descricao          String               @unique
  valor              Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt()
  DescontoEfectuados DescontoEfectuados[]
}

model DescontoEfectuados {
  pagamento       Pagamento @relation(fields: [pagamentoId], references: [id])
  pagamentoId     Int
  desconto        Desconto  @relation(fields: [descontoId], references: [id])
  descontoId      Int
  numeroDeFactura String    

  @@id([pagamentoId, descontoId])
}
